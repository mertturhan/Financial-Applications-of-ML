{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "77cd02d6",
   "metadata": {},
   "source": [
    "## Fetch data using API "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7247d7f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import os\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41c9abfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "os.makedirs(\"data\", exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68af7a44",
   "metadata": {},
   "outputs": [],
   "source": [
    "FRED_URL = \"https://api.stlouisfed.org/fred/series/observations\"\n",
    "FRED_API_KEY =\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfca7c7c",
   "metadata": {},
   "source": [
    "A helper function to fetch data using FRED API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3c54ba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fetch_fred_series(series_id, start=\"2010-01-01\", end=\"2025-12-31\"):\n",
    "    params = {\n",
    "        \"series_id\":        series_id,\n",
    "        \"api_key\":          FRED_API_KEY,\n",
    "        \"file_type\":        \"json\",\n",
    "        \"observation_start\": start,\n",
    "        \"observation_end\":   end,\n",
    "    }\n",
    "    resp = requests.get(FRED_URL, params=params, timeout=30)\n",
    "    data = resp.json().get(\"observations\", [])\n",
    "    df   = pd.DataFrame(data)\n",
    "    df[\"date\"]  = pd.to_datetime(df[\"date\"])\n",
    "    df[\"value\"] = pd.to_numeric(df[\"value\"], errors=\"coerce\")\n",
    "    return df[[\"date\", \"value\"]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81558f2a",
   "metadata": {},
   "source": [
    "CPI data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9f8d67c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tr_cpi = fetch_fred_series(\"TURCPALTT01IXNBM\").rename(columns={\"value\": \"TR_CPI\"})\n",
    "df_us_cpi = fetch_fred_series(\"CPALTT01USM657N\").rename(columns={\"value\": \"US_CPI\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e41c348",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_cpi = pd.merge(df_tr_cpi, df_us_cpi, how=\"outer\", on='date')\n",
    "df_cpi.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f629cc0e",
   "metadata": {},
   "source": [
    "TRY/USD Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6546bbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_exchange = fetch_fred_series(\"CCUSMA02TRM618N\").rename(columns={\"value\": \"TRY_USD\"})\n",
    "df_exchange.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f941182d",
   "metadata": {},
   "source": [
    "Trade Balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bf6bc3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tr_balance = fetch_fred_series(\"XTNTVA01TRM667S\").rename(columns={\"value\": \"TR_BALANCE\"})\n",
    "df_us_balance = fetch_fred_series(\"XTNTVA01USM667S\").rename(columns={\"value\": \"US_BALANCE\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07e2f26b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_balance = pd.merge(df_tr_balance, df_us_balance, how=\"outer\", on='date')\n",
    "df_balance.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1524db74",
   "metadata": {},
   "source": [
    "Policy rates of two countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6fd8f25",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tr_policy = fetch_fred_series(\"XTNTVA01TRM667S\").rename(columns={\"value\": \"TR_POLICY\"})\n",
    "df_us_policy = fetch_fred_series(\"XTNTVA01USM667S\").rename(columns={\"value\": \"US_POLICY\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46723d9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_policy = pd.merge(df_tr_policy, df_us_policy, how=\"outer\", on='date')\n",
    "df_policy.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcf590a4",
   "metadata": {},
   "source": [
    "Now I fetch the World Bank data for political instability and rule of law, again using a helper function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "433ecddd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fetch_wb(country, indicator, start=2010, end=2025):\n",
    "    url = (\n",
    "        f\"https://api.worldbank.org/v2/country/{country}/indicator/{indicator}\"\n",
    "        f\"?date={start}:{end}&format=json&per_page=500\"\n",
    "    )\n",
    "    response = requests.get(url)\n",
    "    json_data = response.json()\n",
    "    #API response Ä±s a list and \n",
    "    #has shape [metadata, data], therefore we extract the 1st index to reach the actual data\n",
    "    records = json_data[1]\n",
    "    df = pd.DataFrame(records)\n",
    "    df[\"date\"]  = pd.to_datetime(df[\"date\"])\n",
    "    df[\"value\"] = pd.to_numeric(df[\"value\"], errors=\"coerce\") \n",
    "    \n",
    "    return df.sort_values('date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d07ac50",
   "metadata": {},
   "outputs": [],
   "source": [
    "polstab_tr = fetch_wb(\"TUR\", \"PV.EST\")\n",
    "polstab_us = fetch_wb(\"USA\", \"PV.EST\")\n",
    "rulelaw_tr = fetch_wb(\"TUR\", \"RL.EST\")\n",
    "rulelaw_us = fetch_wb(\"USA\", \"RL.EST\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83f0cd23",
   "metadata": {},
   "outputs": [],
   "source": [
    "polstab_tr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6228b4ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "polstab_tr = polstab_tr[['date','value']].rename(columns={'value':'TR_POLS'})\n",
    "polstab_us = polstab_us[['date','value']].rename(columns={'value':'US_POLS'})\n",
    "rulelaw_tr = rulelaw_tr[['date','value']].rename(columns={'value':'TR_LAW'})\n",
    "rulelaw_us = rulelaw_us[['date','value']].rename(columns={'value':'US_LAW'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a4babd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.merge(rulelaw_tr, rulelaw_us, on='date', how='outer')\n",
    "df2 = pd.merge(polstab_tr, polstab_us, on='date', how='outer')\n",
    "df_gov = pd.merge(df1, df2, how=\"outer\", on='date')\n",
    "df_gov.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98ca865c",
   "metadata": {},
   "source": [
    "Now, I merge all the datasets. To do this I first need to match all the data in monthly frequency, reduce the frequency of the datasets that are more frequent (exchange) and increase to frequency of the datasets that are less frequent (gov)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18aae95b",
   "metadata": {},
   "outputs": [],
   "source": [
    "for df in (df_balance, df_cpi, df_exchange, df_policy):\n",
    "    df['date'] = pd.to_datetime(df['date']).dt.to_period('M').dt.to_timestamp()\n",
    "\n",
    "\n",
    "gov = df_gov.copy()\n",
    "\n",
    "\n",
    "gov['date'] = pd.to_datetime(gov['date'].astype(str) + \"-01\")\n",
    "\n",
    "gov = (\n",
    "    gov\n",
    "    .set_index('date')\n",
    "    .resample('MS')\n",
    "    .ffill()\n",
    "    .reset_index()\n",
    ")\n",
    "\n",
    "macro = (\n",
    "    df_balance\n",
    "    .merge(df_cpi, on='date', how='outer')\n",
    "    .merge(df_exchange,  on='date', how='outer')\n",
    "    .merge(gov,     on='date', how='outer')\n",
    "    .merge(df_policy,     on='date', how='outer')\n",
    "    .sort_values('date')\n",
    "    .reset_index(drop=True)\n",
    ")\n",
    "\n",
    "\n",
    "macro.to_csv(\"data/macro_data.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9cb5c93",
   "metadata": {},
   "source": [
    "## Getting sentiment scores using news text data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05bfa001",
   "metadata": {},
   "source": [
    "Turkey had times of political instability recently, which led to huge leaps in the exchange rate. My previous experince showed me that simply modeling exchange rate using macroeconomic data explains a small part of the increase in the exchange rate. The economic outcomes in these times are attributed to a combination od the decision made to follow an unorthodox economic policy (higher policy rates to combat inflation) and the authocratic tendencies of the government and decreasing trust in the stability of the country resulting from these. Therefore I will use text data from news websites, get the sentiment scores from these articles using a language model trained on financial data(outputs -1,0 and 1), and from a pure sentimental model (produces a discrete output from 1-5), and incorporate it in my dataset for analysis. My intention is to explain some of the variation in these datasets using the text data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af27e34a",
   "metadata": {},
   "source": [
    "Due to time and technical constrains I will only be using articles from mainstream media outlets. Only one source (the most popular one) will be used from Turkey due to the bias and their closeness to the government. Furthermore, due to the concerns of freedom of expression and bans on publications for certain news, the focus will be on financial and political articles of foreign mainstream media"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fbac7cb",
   "metadata": {},
   "source": [
    "The aforementioned technical constraints are:\n",
    "Some websites use captcha to prevent scraping\n",
    "and some popular outlets require subscription,\n",
    "\n",
    "so the outlets I have chosen are the ones that let one scrape and free"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d44092a",
   "metadata": {},
   "source": [
    "Also, a more robust approach would be to tokenize all the text we have, so we can process the text within our context. This requires a lot of data, and we can capture how this text data interacted with exchange rate, just like FinBERT focuses on financial data. However, to do this I need way more text data for my training set. Keywords like \"turkey economy\" started appearing more often after the beginning of this decade, which roughly corresponds to my test set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56d3d391",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from selenium.webdriver.chrome.options import Options\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "import re, datetime, dateutil.parser, time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e86a736d",
   "metadata": {},
   "source": [
    "I set the general settings before defining the scraper functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a238363b",
   "metadata": {},
   "outputs": [],
   "source": [
    "_opts = Options()\n",
    "_opts.add_argument(\"--headless\")\n",
    "_service = Service()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49bb2fe4",
   "metadata": {},
   "source": [
    "Each website is designed in a unique way, so I need to define different functions to scrape news articles from these websites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bd52901",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape_bbc_article(url, timeout=10):\n",
    "    with webdriver.Chrome(service=_service, options=_opts) as driver:\n",
    "        driver.get(url)\n",
    "        wait = WebDriverWait(driver, timeout)\n",
    "        tm = wait.until(EC.presence_of_element_located((By.XPATH, \"//time[@datetime]\")))\n",
    "        date_obj = dateutil.parser.isoparse(tm.get_attribute(\"datetime\")).date()\n",
    "        dt = date_obj.isoformat()\n",
    "        blocks = driver.find_elements(By.XPATH, \"//div[@data-component='text-block']\")\n",
    "        raw = \" \".join(b.text for b in blocks if b.text.strip())\n",
    "        text = \" \".join(raw.split())\n",
    "        return dt, text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac78267e",
   "metadata": {},
   "outputs": [],
   "source": [
    "scrape_bbc_article(\"https://www.bbc.com/news/world-europe-12142630\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54ddd7c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape_hurriyet(url, timeout=10):\n",
    "    TUR_MONTHS = {\n",
    "        \"Ocak\":    \"January\",\n",
    "        \"Åubat\":   \"February\",\n",
    "        \"Mart\":    \"March\",\n",
    "        \"Nisan\":   \"April\",\n",
    "        \"MayÄ±s\":   \"May\",\n",
    "        \"Haziran\": \"June\",\n",
    "        \"Temmuz\":  \"July\",\n",
    "        \"AÄustos\": \"August\",\n",
    "        \"EylÃ¼l\":   \"September\",\n",
    "        \"Ekim\":    \"October\",\n",
    "        \"KasÄ±m\":   \"November\",\n",
    "        \"AralÄ±k\":  \"December\"\n",
    "    }\n",
    "   \n",
    "    with webdriver.Chrome(service=_service, options=_opts) as driver:\n",
    "        \n",
    "        driver.get(url)\n",
    "        wait = WebDriverWait(driver, 100)\n",
    "        cookie_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"Ä°zin ver\"]')))\n",
    "        cookie_button.click()\n",
    "        dt_el = wait.until(EC.presence_of_element_located(\n",
    "            (By.XPATH, \"//*[contains(text(),'GÃ¼ncelleme Tarihi')]\")\n",
    "        ))\n",
    "        raw = dt_el.text.split(\":\", 1)[1].strip()\n",
    "        for tr, en in TUR_MONTHS.items():\n",
    "            if raw.startswith(tr):\n",
    "                raw = raw.replace(tr, en)\n",
    "                break\n",
    "        date_obj = dateutil.parser.parse(raw, dayfirst=True).date()\n",
    "        dt = date_obj.isoformat()\n",
    "\n",
    "\n",
    "        toggles = driver.find_elements(By.XPATH, \"//strong[contains(@class,'read-more-detail')]\")\n",
    "        for btn in toggles:\n",
    "            try:\n",
    "                btn.click()\n",
    "            except:\n",
    "                driver.execute_script(\"arguments[0].click()\", btn)\n",
    "            time.sleep(0.3)  # give it a moment to expand\n",
    "\n",
    "        paras = driver.find_elements(By.XPATH,\n",
    "            \"//div[@class = 'news-content readingTime']//p\"\n",
    "        )\n",
    "        raw = \" \".join(p.text for p in paras if p.text.strip())\n",
    "        text = \" \".join(raw.split())\n",
    "        return dt, text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d91aaba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "scrape_hurriyet(\"https://bigpara.hurriyet.com.tr/haberler/ekonomi-haberleri/fitchten-turkiye-icin-olumlu-yorum_ID1610337/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59a9e7e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape_cnn(url, timeout=10):\n",
    "    with webdriver.Chrome(service=_service, options=_opts) as driver:\n",
    "        driver.get(url)\n",
    "        wait = WebDriverWait(driver, timeout)\n",
    "\n",
    "\n",
    "        cookie_button =  wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@id=\"onetrust-accept-btn-handler\"]')))\n",
    "        cookie_button.click()\n",
    "\n",
    "\n",
    "        ts_el = wait.until(\n",
    "            EC.presence_of_element_located((By.XPATH, \"//div[contains(@class,'timestamp')]\"))\n",
    "        )\n",
    "        ts_text = ts_el.text   \n",
    "\n",
    "\n",
    "        m = re.search(r'([A-Za-z]+)\\s+(\\d{1,2}),?\\s+(\\d{4})', ts_text)\n",
    "\n",
    "\n",
    "        month_str, day, year = m.groups()\n",
    "        date_obj = datetime.datetime.strptime(\n",
    "            f\"{month_str} {day} {year}\", \"%B %d %Y\"\n",
    "        ).date()                       \n",
    "\n",
    "        dt = date_obj.isoformat()      \n",
    "\n",
    "        \n",
    "        paras = driver.find_elements(By.XPATH, \"//p[@data-editable='text']\")\n",
    "        raw   = \" \".join(p.text for p in paras if p.text.strip())\n",
    "        text  = \" \".join(raw.split())\n",
    "\n",
    "        return dt, text\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef08c0e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "scrape_cnn(\"https://edition.cnn.com/2014/08/07/business/turkey-economy-problems/index.html\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f75f992b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape_yahoo_fin(url):\n",
    "    with webdriver.Chrome(service=_service, options=_opts) as driver:\n",
    "        driver.get(url)\n",
    "        wait = WebDriverWait(driver, 10)\n",
    "\n",
    "        cookie_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@name=\"agree\"]')))\n",
    "        cookie_button.click()\n",
    "\n",
    "        dt_el = wait.until(EC.presence_of_element_located((By.XPATH, '//time[@class=\"byline-attr-meta-time\"]')))\n",
    "\n",
    "        date_obj = dateutil.parser.isoparse(dt_el.get_attribute(\"datetime\")).date()\n",
    "\n",
    "        dt = date_obj.isoformat()\n",
    "        \n",
    "        try:\n",
    "            toggle = driver.find_element(By.XPATH, \"//button[@title='Story Continues']\")\n",
    "            driver.execute_script(\"arguments[0].scrollIntoView(true);\", toggle)\n",
    "            toggle.click()\n",
    "            time.sleep(0.5)\n",
    "        except:\n",
    "            \n",
    "            pass\n",
    "\n",
    "        blocks = driver.find_elements(By.XPATH, '//p[@class=\"yf-1090901\"]')\n",
    "\n",
    "\n",
    "        raw = \" \".join(p.text for p in blocks if p.text.strip())\n",
    "        text = \" \".join(raw.split())\n",
    "\n",
    "    \n",
    "        \n",
    "        return dt,text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4dd60299",
   "metadata": {},
   "outputs": [],
   "source": [
    "scrape_yahoo_fin(\"https://finance.yahoo.com/news/turkey-inflation-problem-severe-central-204721084.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecb8bbb9",
   "metadata": {},
   "source": [
    "Another problem with this setup is to choose articles necessary for the analysis. A straightforward approach would be to scrape as many articles as one can, then filter those based on keyword matching. But this requires\n",
    "\n",
    "1-) Too much time\n",
    "\n",
    "2-) Unlimited use of Google's custom search API, which only lets one use 100 searches per day for free\n",
    "\n",
    "Therefore I will automate the search for related articles using keyword: Turkey Economy, and then choose the first 10 results from every year, and collect the relevant links from google. And then using selenium I will get the headings for those articles and choose the most relevant ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7747e36e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from googleapiclient.discovery import build"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94a3a503",
   "metadata": {},
   "outputs": [],
   "source": [
    "API_KEY = ''\n",
    "CSE_ID  = ''\n",
    "\n",
    "def google_search(query, api_key, cse_id, num=10, start=1, sort=None):\n",
    "    service = build(\"customsearch\", \"v1\", developerKey=api_key)\n",
    "    params = {\"q\": query, \"cx\": cse_id, \"num\": num, \"start\": start}\n",
    "    if sort:\n",
    "        params[\"sort\"] = sort\n",
    "    res = service.cse().list(**params).execute()\n",
    "    return [item[\"link\"] for item in res.get(\"items\", [])]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed2f4044",
   "metadata": {},
   "source": [
    "Selenium settings for this task. Mostly same as before but I add an explicit wait criterion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b403ffbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "_path = \"/Users/mertturhan/Downloads/chromedriver-mac-arm64/chromedriver\"\n",
    "_opts    = Options()\n",
    "_opts.add_argument(\"--headless\")\n",
    "_service = Service(executable_path=_path)\n",
    "\n",
    "driver = webdriver.Chrome(service=_service, options=_opts)\n",
    "driver.implicitly_wait(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d56fe409",
   "metadata": {},
   "source": [
    "A helper function using Selenium to get the headings of articles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d7ba7f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_heading_selenium(url, timeout=10):\n",
    "\n",
    "    driver.get(url)\n",
    "    wait = WebDriverWait(driver, timeout)\n",
    "\n",
    "\n",
    "    try:\n",
    "        og = driver.find_element(By.XPATH, \"//meta[@property='og:title']\")\n",
    "        heading = og.get_attribute(\"content\").strip()\n",
    "        if heading:\n",
    "            return heading\n",
    "    except:\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09d9f941",
   "metadata": {},
   "source": [
    "Hurriyet is excluded from here because I have done it manually by myself, and then I realized I can automate some part of the article choosing process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50cd1788",
   "metadata": {},
   "outputs": [],
   "source": [
    "search_sites = [\n",
    "    {\n",
    "      \"name\":   \"cnn\",\n",
    "      \"domain\": \"edition.cnn.com\",        # all CNN articles live under edition.cnn.com\n",
    "      \"term\":   \"turkey economy\"\n",
    "    },\n",
    "    {\n",
    "      \"name\":   \"finance.yahoo\",\n",
    "      \"domain\": \"finance.yahoo.com/news\", # yahoo finance article URLs start with /news\n",
    "      \"term\":   \"turkey economy\"\n",
    "    },\n",
    "    {\n",
    "      \"name\":   \"bbc\",\n",
    "      \"domain\": \"bbc.com/turkce/articles\",# BBC TÃ¼rkÃ§e article URLs look like /turkce/articles/â¦\n",
    "      \"term\":   \"turkiye ekonomi\"\n",
    "    },\n",
    "]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7ca0d57",
   "metadata": {},
   "source": [
    "Creating a list to keep the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "519be69b",
   "metadata": {},
   "outputs": [],
   "source": [
    "for site in search_sites:\n",
    "    for year in range(2010, 2026):\n",
    "        print(f\" {site['name']} â Searching â{site['term']}â in {year}â¦\")\n",
    "        \n",
    "        start_str = f\"{year:04d}0101\"\n",
    "        end_str   = f\"{year+1:04d}0101\"\n",
    "        sort_arg  = f\"date:r:{start_str}:{end_str}\"\n",
    "        query     = f\"site:{site['domain']} {site['term']}\"\n",
    "\n",
    "        urls = google_search(query, API_KEY, CSE_ID,\n",
    "                             num=10, start=1, sort=sort_arg)\n",
    "\n",
    "        if not urls:\n",
    "            print(f\"  â No results for {year}\\n\")\n",
    "            results.append((site[\"name\"], year, []))\n",
    "            continue\n",
    "        \n",
    "        headings = []\n",
    "        for url in urls:\n",
    "            print(\"   â\", url)\n",
    "            try:\n",
    "                title = get_heading_selenium(url)\n",
    "                headings.append((title, url))\n",
    "                print(\"     â¢\", title)\n",
    "            except Exception as e:\n",
    "                print(\"     ! error:\", e)\n",
    "            time.sleep(1)  # be gentle\n",
    "        \n",
    "        print(f\"   Found {len(headings)} headings for {year}\\n\")\n",
    "        results.append((site[\"name\"], year, headings))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dcc5741",
   "metadata": {},
   "source": [
    "I create a list of articles I want to use for my analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0783f628",
   "metadata": {},
   "outputs": [],
   "source": [
    "article = [\n",
    "    (\"https://www.bbc.com/news/world-europe-28961495\"),\n",
    "    (\"https://www.bbc.com/news/world-europe-42203274\"),\n",
    "    (\"https://www.bbc.com/news/world-europe-42189802\"),\n",
    "    (\"https://www.bbc.com/news/world-middle-east-45550537\"),\n",
    "    (\"https://www.bbc.com/news/world-middle-east-49966216\"),\n",
    "    (\"https://www.bbc.com/news/world-middle-east-46859164\"),\n",
    "    (\"https://www.bbc.com/news/world-europe-47785095\"),\n",
    "    (\"https://www.bbc.com/news/business-59681825\"),\n",
    "    (\"https://www.bbc.com/news/business-56479702\"),\n",
    "    (\"https://www.bbc.com/news/business-61332272\"),\n",
    "    (\"https://www.bbc.com/news/world-europe-63120478\"),\n",
    "    (\"https://www.bbc.com/news/business-62035768\"),\n",
    "    (\"https://www.bbc.com/news/world-europe-65971791\"),\n",
    "    (\"https://www.bbc.com/news/business-67506790\"),\n",
    "    (\"https://www.bbc.com/news/world-europe-68704375\"),\n",
    "    (\"https://bigpara.hurriyet.com.tr/haberler/genel-haberler/1-dolar-1-tl-olur-mu_ID725471/\"),\n",
    "    (\"https://www.hurriyet.com.tr/ekonomi/turkiye-yuzde-7-buyuyecek-ama-saglikli-olmayacak-19135012\"),\n",
    "    (\"https://www.hurriyet.com.tr/ekonomi/tl-ye-yatiranlar-kaybetmez-oksaya-oksaya-deger-kazanir-19623039\"),\n",
    "    (\"https://www.hurriyet.com.tr/ekonomi/120-trilyon-dolar-aktif-para-gelismekte-olan-pazara-kayacak-20483973\"),\n",
    "    (\"https://www.hurriyet.com.tr/ekonomi/wsj-turk-ekonomisi-her-cepheden-darbe-aliyor-24656368\"),\n",
    "    (\"https://bigpara.hurriyet.com.tr/haberler/ekonomi-haberleri/financial-timestan-turkiyeye-ovgu_ID967090/\"),\n",
    "    (\"https://www.hurriyet.com.tr/ekonomi/turkiye-kayitdisi-ekonomide-birinci-40041686\"),\n",
    "    (\"https://bigpara.hurriyet.com.tr/haberler/ekonomi-haberleri/unlu-yatirimci-faberden-turkiye-yorumu-firsatlar-var_ID1461556/\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/cek20g0x1n1o\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/c87kd31npkko\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/cz9vnp1r7p0o\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/crgj87ejjnjo\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/clm552jpyngo\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/cyerg0k9rddo\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/c1lne06gdm8o\"),\n",
    "    (\"https://www.bbc.com/turkce/articles/c7v5zre5dg5o\"),\n",
    "    (\"https://edition.cnn.com/2013/11/01/opinion/turkey-kurdish-energy/index.html\"),\n",
    "    (\"https://edition.cnn.com/2013/10/29/business/marmaray-tunnel-turkey-john-defterios/index.html\"),\n",
    "    (\"https://edition.cnn.com/2013/07/16/world/europe/turkey-protest-arrests/index.html\"),\n",
    "    (\"https://edition.cnn.com/2013/12/27/world/europe/turkey-unrest/index.html\"),\n",
    "    (\"https://edition.cnn.com/2014/03/28/business/turkey-economy-election/index.html\"),\n",
    "    (\"https://edition.cnn.com/2014/08/07/business/turkey-economy-problems/index.html\"),\n",
    "    (\"https://edition.cnn.com/2014/01/08/opinion/turkey-politics-conservatism-hakura/index.html\"),\n",
    "    (\"https://edition.cnn.com/2014/08/08/world/europe/turkey-election-explained/index.html\"),\n",
    "    (\"https://edition.cnn.com/2017/04/15/europe/turkey-erdogan-referendum-politics/index.html\"),\n",
    "    (\"https://edition.cnn.com/2017/04/12/europe/turkey-referendum-istanbul/index.html\"),\n",
    "    (\"https://edition.cnn.com/2017/03/12/europe/turkish-dutch-tensions-increase/index.html\"),\n",
    "    (\"https://edition.cnn.com/2018/04/18/europe/erdogan-turkey-early-elections-intl/index.html\"),\n",
    "    (\"https://edition.cnn.com/2018/08/13/europe/erdogan-us-sanctions-brunson-intl/index.html\"),\n",
    "    (\"https://edition.cnn.com/2018/06/25/europe/turkey-elections-erdogan-monitors-intl/index.html\"),\n",
    "    (\"https://edition.cnn.com/2019/10/15/business/volkswagen-plant-turkey/index.html\"),\n",
    "    (\"https://edition.cnn.com/2021/07/01/europe/turkey-istanbul-convention-women-intl/index.html\"),\n",
    "    (\"https://edition.cnn.com/2023/05/19/economy/erdogan-turkey-election-inflation-promise/index.html\"),\n",
    "    (\"https://edition.cnn.com/2023/05/15/investing/turkey-election-lira-markets-fall/index.html\"),\n",
    "    (\"https://edition.cnn.com/2023/08/24/economy/turkey-interest-rate-hike-25/index.html\"),\n",
    "    (\"https://edition.cnn.com/2023/05/19/investing/premarket-stocks-trading/index.html\"),\n",
    "    (\"https://edition.cnn.com/2023/02/08/tech/turkey-twitter-restriction/index.html\"),\n",
    "    (\"https://finance.yahoo.com/news/u-concerned-turkeys-choice-chinese-014821298.html\"),\n",
    "    (\"https://finance.yahoo.com/news/u-based-emerging-markets-stock-000835095.html\"),\n",
    "    (\"https://finance.yahoo.com/news/why-emerging-markets-appear-attractive-000453110.html\"),\n",
    "    (\"https://finance.yahoo.com/news/turkey-targeting-10-billion-annual-095212735.html\"),\n",
    "    (\"https://finance.yahoo.com/news/turkey-slams-unacceptable-photos-us-103200098.html\"),\n",
    "    (\"https://finance.yahoo.com/news/gas-gold-turkey-iran-scheme-explained-151517687.html\"),\n",
    "    (\"https://finance.yahoo.com/news/profit-turkish-turmoil-global-inverse-193407706.html\"),\n",
    "    (\"https://finance.yahoo.com/news/solving-turkeys-problems-will-require-just-raising-interest-rates-171850606.html\"),\n",
    "    (\"https://finance.yahoo.com/news/trump-ll-devastate-turkey-economy-151240696.html\"),\n",
    "    (\"https://sg.finance.yahoo.com/news/cyprus-turkey-may-stolen-data-120619758.html\"),\n",
    "    (\"https://sg.finance.yahoo.com/news/cruise-ship-dismantling-booms-turkey-135016520.html\"),\n",
    "    (\"https://finance.yahoo.com/news/turkish-textile-industry-seeks-global-065100987.html\"),\n",
    "    (\"https://finance.yahoo.com/news/1-turkeys-erdogan-hold-meeting-092231468.html\"),\n",
    "    (\"https://finance.yahoo.com/news/turkey-cenbank-says-shock-rate-110311031.html\"),\n",
    "    (\"https://finance.yahoo.com/news/1-saudi-arabia-says-close-132347044.html\"),\n",
    "    (\"https://finance.yahoo.com/news/turkey-says-not-u-pressure-124053652.html\"),\n",
    "    (\"https://finance.yahoo.com/news/1-u-warns-turkey-exports-104745934.html\"),\n",
    "    (\"https://finance.yahoo.com/news/turkey-inflation-problem-severe-central-204721084.html\")\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "258f5a03",
   "metadata": {},
   "outputs": [],
   "source": [
    "results = []\n",
    "for url in article:\n",
    "    try:\n",
    "        if \"bbc.com\" in url:\n",
    "            dt, txt = scrape_bbc_article(url)\n",
    "            source = \"bbc\"\n",
    "        elif \"hurriyet.com.tr\" in url:\n",
    "            dt, txt = scrape_hurriyet(url)\n",
    "            source = \"hurriyet\"\n",
    "        elif \"cnn.com\" in url:\n",
    "            dt, txt = scrape_cnn(url)\n",
    "            source = \"cnn\"\n",
    "        elif \"finance.yahoo.com\" in url:\n",
    "            dt, txt = scrape_yahoo_fin(url)\n",
    "            source = \"yahoo\"\n",
    "        else:\n",
    "            continue\n",
    "        results.append((dt, txt, source))\n",
    "        print(f\"â Successfully scraped: {url} and added to dataset for {source}\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"â Error scraping {url}: {e}\")\n",
    "    \n",
    "df_news = pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b9fc647",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_news.columns = ['date', 'text', 'source']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c3f5269",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_news['date'] = pd.to_datetime(df_news['date'])\n",
    "\n",
    "df_news = df_news.sort_values(by='date')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd3b5ac9",
   "metadata": {},
   "source": [
    "Necessary libraries for sentiment score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47251036",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"TRANSFORMERS_NO_TF\"] = \"1\"  \n",
    "from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\n",
    "from transformers import AutoTokenizer, AutoModelForSequenceClassification, AutoModelForSeq2SeqLM\n",
    "import torch, torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12ce63fa",
   "metadata": {},
   "source": [
    "We need a tokenizer (to get the numeric token values for words in the article) and the actual model.\n",
    "\n",
    "Here's for finBERT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "693ce871",
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer_fb = AutoTokenizer.from_pretrained(\"ProsusAI/finbert\")\n",
    "model_fb = AutoModelForSequenceClassification.from_pretrained(\"ProsusAI/finbert\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ffb832b",
   "metadata": {},
   "source": [
    "and for mBERT (a multilingual model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea7f3228",
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer_mb = AutoTokenizer.from_pretrained(\"nlptown/bert-base-multilingual-uncased-sentiment\")\n",
    "model_mb = AutoModelForSequenceClassification.from_pretrained(\"nlptown/bert-base-multilingual-uncased-sentiment\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6191df3",
   "metadata": {},
   "source": [
    "FinBERT only works with english text, so I need to use a machine translation model to translate Turkish text to English"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c456fb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer_tr_en = AutoTokenizer.from_pretrained(\"Helsinki-NLP/opus-mt-tr-en\")\n",
    "model_tr_en = AutoModelForSeq2SeqLM.from_pretrained(\"Helsinki-NLP/opus-mt-tr-en\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "257f4658",
   "metadata": {},
   "source": [
    "I set the device to cpu for PyTorch, and then I put the models on the device, which explicitly has to be stated while using PyTorch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0b96bcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device(\"cpu\")\n",
    "model_fb, model_mb, model_tr_en = model_fb.to(device), model_mb.to(device), model_tr_en.to(device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5584ca4",
   "metadata": {},
   "source": [
    "Now I define helper functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86a60922",
   "metadata": {},
   "source": [
    "The max_len parameter defines how long we let the sentence to be. To keep the sentences manageable, I set a threshold to 512. Truncate=true ensures the text is shorter than the threshold. I want tensors returned in a way that is compatible to pytorch. And I use torch.inference_mode because I do not want to calculate gradients on my task and upgrade the parameters, i.e. I want to use the model as is\n",
    "\n",
    ".decode operation converts the encoded translated tokens into human readable strings. And we get the first generated output (the most likely corresponding translation in this case) and use it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f616f6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def translate_tr_en(text, max_len=512):\n",
    "    with torch.inference_mode():\n",
    "        tokens = tokenizer_tr_en(\n",
    "            text,\n",
    "            return_tensors=\"pt\",\n",
    "            truncation=True,\n",
    "            max_length=max_len\n",
    "        ).to(device)  \n",
    "        ids_t = model_tr_en.generate(**tokens, max_length=max_len)[0]\n",
    "        ids_list = ids_t.cpu().tolist()\n",
    "\n",
    "    return tokenizer_tr_en.decode(ids_list, skip_special_tokens=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1071b44f",
   "metadata": {},
   "source": [
    "the logits corresponding to the produced probabilities by the model. we use the highest scoring probability as the prediceted class here (among positive, negative, neutral)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d19df1cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def finbert_score(text):\n",
    "    with torch.inference_mode():\n",
    "        tokens = tokenizer_fb(text, return_tensors=\"pt\",\n",
    "                      truncation=True, max_length=512).to(device)\n",
    "        score = torch.argmax(model_fb(**tokens).logits).item() \n",
    "    return score                "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b22da053",
   "metadata": {},
   "source": [
    "same here, but we get a sentiment score from 1-5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be252db8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mbert_score(text):\n",
    "    with torch.inference_mode():\n",
    "        tokens = tokenizer_mb(text, return_tensors=\"pt\",\n",
    "                      truncation=True, max_length=512).to(device)\n",
    "        star = torch.argmax(model_mb(**tokens).logits).item()  \n",
    "    return star"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a024366",
   "metadata": {},
   "source": [
    "then the last helper function to calculate the scores. we use translation model if the source is hurriyet, so finBERT can produce an output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32a56001",
   "metadata": {},
   "outputs": [],
   "source": [
    "def score_article(source: str, text: str):\n",
    "\n",
    "    mbert_sc = mbert_score(text)\n",
    "\n",
    "    if source.lower() == \"hurriyet\":\n",
    "        text = translate_tr_en(text)\n",
    "    finbert_sc = finbert_score(text)\n",
    "    \n",
    "    return finbert_sc, mbert_sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c136a950",
   "metadata": {},
   "outputs": [],
   "source": [
    "Apply the functions on the dataset, so we get the scores for these"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fbfdefe",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_news[[\"finbert_sent\",\"mbert_sent\"]] = df_news.apply(\n",
    "    lambda r: score_article(r[\"source\"], r[\"text\"]),\n",
    "    axis=1, result_type=\"expand\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "295d9056",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_news.head(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8a6c7d8",
   "metadata": {},
   "source": [
    "Now I will construct a monthly sentiment dataset. The dataset will be contructed with the following rules:\n",
    "\n",
    "1-) Let M, be the month where our analysis start, and let M_t be the month where the first sentiment analysis is available. The sentiment score for the months in between M and M_t will be equal to the score in M_t\n",
    "\n",
    "2-) Let M_t and M_t+1 be two month with sentiment scores available. All the months between these two will have the sentiment score of the later\n",
    "\n",
    "3-)If more than 1 article corresponds to the same month, the sentiment score will be the average of these articles.\n",
    "\n",
    "\n",
    "The following logic will be applied since news articles mostly cover what happened in the past."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "323844d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_temp = df_news[[\"date\", \"finbert_sent\", \"mbert_sent\"]].copy()\n",
    "df_temp['date'] = pd.to_datetime(df_temp['date'])\n",
    "df_temp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcff435f",
   "metadata": {},
   "source": [
    "I create a dictionary to keep monthly sentiment scores, so I can average them later"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6962347d",
   "metadata": {},
   "outputs": [],
   "source": [
    "expanded_rows = [] #will hold one row per month\n",
    "\n",
    "\n",
    "previous_month_ts = None\n",
    "\n",
    "for _, row in df_temp.iterrows():\n",
    "    current_month_ts = row['date'].to_period(\"M\").to_timestamp() #setting it to monthly periods, and then month start\n",
    "    \n",
    "    #months covered by this article: (prev_date, current_month) (open,close]\n",
    "    \n",
    "    if previous_month_ts is None:\n",
    "        months_covered = [current_month_ts]\n",
    "    else:\n",
    "        months_covered = pd.date_range(\n",
    "            start=previous_month_ts + pd.offsets.MonthBegin(1),\n",
    "            end=current_month_ts,\n",
    "            freq=\"MS\"\n",
    "        )\n",
    "        \n",
    "    for m in months_covered:\n",
    "        expanded_rows.append({\n",
    "            \"date\":m,\n",
    "            \"fin\": row[\"finbert_sent\"],\n",
    "            \"mbert\": row[\"mbert_sent\"]\n",
    "        })\n",
    "    \n",
    "    previous_month_ts = current_month_ts\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6958b407",
   "metadata": {},
   "source": [
    "I group by date and take their mean here, so averaging occurs here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6230cb9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "monthly_sentiment = (\n",
    "    pd.DataFrame(expanded_rows)\n",
    "      .groupby(\"date\", as_index=False)\n",
    "      .mean()\n",
    "      .rename(columns={\"fin\": \"finbert_month\",\n",
    "                       \"mbr\": \"mbert_month\"})\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "239b0e54",
   "metadata": {},
   "outputs": [],
   "source": [
    "monthly_sentiment.to_csv(\"data/monthly_sentiment.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10ff7af7",
   "metadata": {},
   "source": [
    "## Research Question and Motivation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b1eb76b",
   "metadata": {},
   "source": [
    "Given monthly macro and sentimental indicators about the economy, can a feed-forward neural network predict the TRY/USD rate, even though Turkey's economy witnessed structural transformations and events hard to capture by numerical data. Later, I also try to analyze what would have happened had the central bank followed orthodox policies, i.e. raise the interest rate higher to curb the inflation monster. I will analyze this by raising the interest rate 200 base points higher than the inflation rate at timestep t-1."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d83f87b",
   "metadata": {},
   "source": [
    "I initially intended to use a sequential model (RNN based), but this turned out to be not a good idea. Because I simply do not have enough data to train a sequential model (around 160 instances). Therefore I decided to use a FFNN, and I will use observations from the previous 12 months to introduce time-dependencies."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9168ed0f",
   "metadata": {},
   "source": [
    "Why this quesiton motivates me is that Turkey offers a rare natural-experiment in monetary economics: after 2018 the Central Bank abandoned the standard raise rates to tame the inflation approach and cut the interest rates, therefore the real rates were deep in the negative zone. This resulted in the fastest depreciating currency among G-20 countries. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "705b4c8e",
   "metadata": {},
   "source": [
    "# Final Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fb0f132",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import TensorDataset, DataLoader\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm.auto import tqdm\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c8fa47ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "macro = pd.read_csv(\"data/macro_data.csv\")\n",
    "sentiment = pd.read_csv(\"data/monthly_sentiment.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9d8d5f18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>TR_BALANCE</th>\n",
       "      <th>US_BALANCE</th>\n",
       "      <th>TR_CPI</th>\n",
       "      <th>US_CPI</th>\n",
       "      <th>TRY_USD</th>\n",
       "      <th>TR_LAW</th>\n",
       "      <th>US_LAW</th>\n",
       "      <th>TR_POLS</th>\n",
       "      <th>US_POLS</th>\n",
       "      <th>TR_POLICY</th>\n",
       "      <th>US_POLICY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>-5.097985e+09</td>\n",
       "      <td>-4.850600e+10</td>\n",
       "      <td>174.07</td>\n",
       "      <td>0.341747</td>\n",
       "      <td>1.467119</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-5.097985e+09</td>\n",
       "      <td>-4.850600e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-02-01</td>\n",
       "      <td>-4.396858e+09</td>\n",
       "      <td>-5.096500e+10</td>\n",
       "      <td>176.59</td>\n",
       "      <td>0.024921</td>\n",
       "      <td>1.508210</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.396858e+09</td>\n",
       "      <td>-5.096500e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-03-01</td>\n",
       "      <td>-4.713215e+09</td>\n",
       "      <td>-5.045200e+10</td>\n",
       "      <td>177.62</td>\n",
       "      <td>0.410628</td>\n",
       "      <td>1.527426</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.713215e+09</td>\n",
       "      <td>-5.045200e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-04-01</td>\n",
       "      <td>-5.540905e+09</td>\n",
       "      <td>-5.130900e+10</td>\n",
       "      <td>178.68</td>\n",
       "      <td>0.173688</td>\n",
       "      <td>1.485386</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-5.540905e+09</td>\n",
       "      <td>-5.130900e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-05-01</td>\n",
       "      <td>-4.749759e+09</td>\n",
       "      <td>-5.261100e+10</td>\n",
       "      <td>178.04</td>\n",
       "      <td>0.077520</td>\n",
       "      <td>1.541019</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.749759e+09</td>\n",
       "      <td>-5.261100e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date    TR_BALANCE    US_BALANCE  TR_CPI    US_CPI   TRY_USD  \\\n",
       "0  2010-01-01 -5.097985e+09 -4.850600e+10  174.07  0.341747  1.467119   \n",
       "1  2010-02-01 -4.396858e+09 -5.096500e+10  176.59  0.024921  1.508210   \n",
       "2  2010-03-01 -4.713215e+09 -5.045200e+10  177.62  0.410628  1.527426   \n",
       "3  2010-04-01 -5.540905e+09 -5.130900e+10  178.68  0.173688  1.485386   \n",
       "4  2010-05-01 -4.749759e+09 -5.261100e+10  178.04  0.077520  1.541019   \n",
       "\n",
       "    TR_LAW    US_LAW   TR_POLS   US_POLS     TR_POLICY     US_POLICY  \n",
       "0      NaN       NaN       NaN       NaN -5.097985e+09 -4.850600e+10  \n",
       "1  0.04998  1.631022 -0.915286  0.438404 -4.396858e+09 -5.096500e+10  \n",
       "2  0.04998  1.631022 -0.915286  0.438404 -4.713215e+09 -5.045200e+10  \n",
       "3  0.04998  1.631022 -0.915286  0.438404 -5.540905e+09 -5.130900e+10  \n",
       "4  0.04998  1.631022 -0.915286  0.438404 -4.749759e+09 -5.261100e+10  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "macro.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6d1da2",
   "metadata": {},
   "source": [
    "fill in the missing values from the 1st month with the values in the second month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ed17d580",
   "metadata": {},
   "outputs": [],
   "source": [
    "macro.iloc[0] = macro.iloc[0].fillna(macro.iloc[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "006305dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>finbert_month</th>\n",
       "      <th>mbert</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-10-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-11-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-12-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-02-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2011-03-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2011-04-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2011-05-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2011-06-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2011-07-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2011-08-01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          date  finbert_month  mbert\n",
       "0   2010-10-01            0.0    0.0\n",
       "1   2010-11-01            1.0    1.0\n",
       "2   2010-12-01            1.0    1.0\n",
       "3   2011-01-01            1.0    1.0\n",
       "4   2011-02-01            1.0    1.0\n",
       "5   2011-03-01            1.0    1.0\n",
       "6   2011-04-01            1.0    1.0\n",
       "7   2011-05-01            1.0    1.0\n",
       "8   2011-06-01            1.0    1.0\n",
       "9   2011-07-01            1.0    1.0\n",
       "10  2011-08-01            1.0    1.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentiment.head(11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e6f92bab",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final = pd.merge(macro, sentiment, how=\"outer\", on=\"date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d87766d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>TR_BALANCE</th>\n",
       "      <th>US_BALANCE</th>\n",
       "      <th>TR_CPI</th>\n",
       "      <th>US_CPI</th>\n",
       "      <th>TRY_USD</th>\n",
       "      <th>TR_LAW</th>\n",
       "      <th>US_LAW</th>\n",
       "      <th>TR_POLS</th>\n",
       "      <th>US_POLS</th>\n",
       "      <th>TR_POLICY</th>\n",
       "      <th>US_POLICY</th>\n",
       "      <th>finbert_month</th>\n",
       "      <th>mbert</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>-5.097985e+09</td>\n",
       "      <td>-4.850600e+10</td>\n",
       "      <td>174.07</td>\n",
       "      <td>0.341747</td>\n",
       "      <td>1.467119</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-5.097985e+09</td>\n",
       "      <td>-4.850600e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-02-01</td>\n",
       "      <td>-4.396858e+09</td>\n",
       "      <td>-5.096500e+10</td>\n",
       "      <td>176.59</td>\n",
       "      <td>0.024921</td>\n",
       "      <td>1.508210</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.396858e+09</td>\n",
       "      <td>-5.096500e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-03-01</td>\n",
       "      <td>-4.713215e+09</td>\n",
       "      <td>-5.045200e+10</td>\n",
       "      <td>177.62</td>\n",
       "      <td>0.410628</td>\n",
       "      <td>1.527426</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.713215e+09</td>\n",
       "      <td>-5.045200e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-04-01</td>\n",
       "      <td>-5.540905e+09</td>\n",
       "      <td>-5.130900e+10</td>\n",
       "      <td>178.68</td>\n",
       "      <td>0.173688</td>\n",
       "      <td>1.485386</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-5.540905e+09</td>\n",
       "      <td>-5.130900e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-05-01</td>\n",
       "      <td>-4.749759e+09</td>\n",
       "      <td>-5.261100e+10</td>\n",
       "      <td>178.04</td>\n",
       "      <td>0.077520</td>\n",
       "      <td>1.541019</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.749759e+09</td>\n",
       "      <td>-5.261100e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date    TR_BALANCE    US_BALANCE  TR_CPI    US_CPI   TRY_USD  \\\n",
       "0  2010-01-01 -5.097985e+09 -4.850600e+10  174.07  0.341747  1.467119   \n",
       "1  2010-02-01 -4.396858e+09 -5.096500e+10  176.59  0.024921  1.508210   \n",
       "2  2010-03-01 -4.713215e+09 -5.045200e+10  177.62  0.410628  1.527426   \n",
       "3  2010-04-01 -5.540905e+09 -5.130900e+10  178.68  0.173688  1.485386   \n",
       "4  2010-05-01 -4.749759e+09 -5.261100e+10  178.04  0.077520  1.541019   \n",
       "\n",
       "    TR_LAW    US_LAW   TR_POLS   US_POLS     TR_POLICY     US_POLICY  \\\n",
       "0  0.04998  1.631022 -0.915286  0.438404 -5.097985e+09 -4.850600e+10   \n",
       "1  0.04998  1.631022 -0.915286  0.438404 -4.396858e+09 -5.096500e+10   \n",
       "2  0.04998  1.631022 -0.915286  0.438404 -4.713215e+09 -5.045200e+10   \n",
       "3  0.04998  1.631022 -0.915286  0.438404 -5.540905e+09 -5.130900e+10   \n",
       "4  0.04998  1.631022 -0.915286  0.438404 -4.749759e+09 -5.261100e+10   \n",
       "\n",
       "   finbert_month  mbert  \n",
       "0            NaN    NaN  \n",
       "1            NaN    NaN  \n",
       "2            NaN    NaN  \n",
       "3            NaN    NaN  \n",
       "4            NaN    NaN  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be73c1e5",
   "metadata": {},
   "source": [
    "Also fill in the values in sentiment scores retrospectively from october."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e6909693",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):\n",
    "    df_final.iloc[i] = df_final.iloc[i].fillna(df_final.iloc[10])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac5e443d",
   "metadata": {},
   "source": [
    "Since the TRY/USD exchange rate will be predicted, I set the target to that column, and drop that column from the features dataset. The sequence length will be set to 12, meaning that the prediction on time t will be based on the features from last year. The reason is that 12 months cover the whole seasonal economic cycle, i.e. capturing annual patterns in macroeconomic indicators (change in CPI, trade balance fluctuations, monetary policy effects) as well as sentiment cycles driven by economic events. This enables the FFNN model to learn both seasonal effects and delayed impacts of economic policy changes, hopefully leading to more accurate monthly exchange rate predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "46735831",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>TR_BALANCE</th>\n",
       "      <th>US_BALANCE</th>\n",
       "      <th>TR_CPI</th>\n",
       "      <th>US_CPI</th>\n",
       "      <th>TRY_USD</th>\n",
       "      <th>TR_LAW</th>\n",
       "      <th>US_LAW</th>\n",
       "      <th>TR_POLS</th>\n",
       "      <th>US_POLS</th>\n",
       "      <th>TR_POLICY</th>\n",
       "      <th>US_POLICY</th>\n",
       "      <th>finbert_month</th>\n",
       "      <th>mbert</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>2023-05-01</td>\n",
       "      <td>-1.145349e+10</td>\n",
       "      <td>-9.028200e+10</td>\n",
       "      <td>1300.60</td>\n",
       "      <td>0.251844</td>\n",
       "      <td>19.747743</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-1.145349e+10</td>\n",
       "      <td>-9.028200e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>2023-06-01</td>\n",
       "      <td>-6.320106e+09</td>\n",
       "      <td>-8.870800e+10</td>\n",
       "      <td>1351.59</td>\n",
       "      <td>0.322891</td>\n",
       "      <td>23.696505</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-6.320106e+09</td>\n",
       "      <td>-8.870800e+10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>2023-07-01</td>\n",
       "      <td>-1.054830e+10</td>\n",
       "      <td>-8.909500e+10</td>\n",
       "      <td>1479.84</td>\n",
       "      <td>0.190752</td>\n",
       "      <td>26.499400</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-1.054830e+10</td>\n",
       "      <td>-8.909500e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163</th>\n",
       "      <td>2023-08-01</td>\n",
       "      <td>-9.078755e+09</td>\n",
       "      <td>-8.368700e+10</td>\n",
       "      <td>1614.31</td>\n",
       "      <td>0.436716</td>\n",
       "      <td>26.943078</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-9.078755e+09</td>\n",
       "      <td>-8.368700e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>2023-09-01</td>\n",
       "      <td>-6.165483e+09</td>\n",
       "      <td>-8.605700e+10</td>\n",
       "      <td>1691.04</td>\n",
       "      <td>0.248513</td>\n",
       "      <td>26.999081</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-6.165483e+09</td>\n",
       "      <td>-8.605700e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>-7.195517e+09</td>\n",
       "      <td>-8.758200e+10</td>\n",
       "      <td>1749.11</td>\n",
       "      <td>-0.038338</td>\n",
       "      <td>27.860200</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-7.195517e+09</td>\n",
       "      <td>-8.758200e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>2023-11-01</td>\n",
       "      <td>-6.332684e+09</td>\n",
       "      <td>-8.860400e+10</td>\n",
       "      <td>1806.50</td>\n",
       "      <td>-0.201514</td>\n",
       "      <td>28.637914</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-6.332684e+09</td>\n",
       "      <td>-8.860400e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>2023-12-01</td>\n",
       "      <td>-5.533670e+09</td>\n",
       "      <td>-8.756100e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.099332</td>\n",
       "      <td>29.078133</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-5.533670e+09</td>\n",
       "      <td>-8.756100e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>2024-01-01</td>\n",
       "      <td>-5.740289e+09</td>\n",
       "      <td>-9.028400e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.544750</td>\n",
       "      <td>30.039583</td>\n",
       "      <td>-0.511973</td>\n",
       "      <td>1.327678</td>\n",
       "      <td>-1.01108</td>\n",
       "      <td>0.029425</td>\n",
       "      <td>-5.740289e+09</td>\n",
       "      <td>-9.028400e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>2024-02-01</td>\n",
       "      <td>-6.423296e+09</td>\n",
       "      <td>-9.230900e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.618967</td>\n",
       "      <td>30.773019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-6.423296e+09</td>\n",
       "      <td>-9.230900e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>2024-03-01</td>\n",
       "      <td>-7.363678e+09</td>\n",
       "      <td>-9.277500e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.646417</td>\n",
       "      <td>32.011638</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-7.363678e+09</td>\n",
       "      <td>-9.277500e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>2024-04-01</td>\n",
       "      <td>-9.995436e+09</td>\n",
       "      <td>-9.873200e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.275659</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-9.995436e+09</td>\n",
       "      <td>-9.873200e+10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>2024-05-01</td>\n",
       "      <td>-4.653023e+09</td>\n",
       "      <td>-9.959200e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.216452</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-4.653023e+09</td>\n",
       "      <td>-9.959200e+10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>2024-06-01</td>\n",
       "      <td>-6.973989e+09</td>\n",
       "      <td>-9.701700e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.525920</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-6.973989e+09</td>\n",
       "      <td>-9.701700e+10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>2024-07-01</td>\n",
       "      <td>-5.568882e+09</td>\n",
       "      <td>-1.034760e+11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.879230</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-5.568882e+09</td>\n",
       "      <td>-1.034760e+11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>2024-08-01</td>\n",
       "      <td>-5.840348e+09</td>\n",
       "      <td>-9.476900e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.645718</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-5.840348e+09</td>\n",
       "      <td>-9.476900e+10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>2024-09-01</td>\n",
       "      <td>-6.636224e+09</td>\n",
       "      <td>-1.091480e+11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.009281</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-6.636224e+09</td>\n",
       "      <td>-1.091480e+11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>2024-10-01</td>\n",
       "      <td>-7.682133e+09</td>\n",
       "      <td>-9.806200e+10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.205096</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-7.682133e+09</td>\n",
       "      <td>-9.806200e+10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>2024-11-01</td>\n",
       "      <td>-8.088026e+09</td>\n",
       "      <td>-1.040550e+11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.414752</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-8.088026e+09</td>\n",
       "      <td>-1.040550e+11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>2024-12-01</td>\n",
       "      <td>-8.021306e+09</td>\n",
       "      <td>-1.221090e+11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.967164</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-8.021306e+09</td>\n",
       "      <td>-1.221090e+11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>2025-01-01</td>\n",
       "      <td>-7.582447e+09</td>\n",
       "      <td>-1.555720e+11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.501270</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-7.582447e+09</td>\n",
       "      <td>-1.555720e+11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>2025-02-01</td>\n",
       "      <td>-7.687427e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.157475</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-7.687427e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>2025-03-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.107862</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date    TR_BALANCE    US_BALANCE   TR_CPI    US_CPI    TRY_USD  \\\n",
       "160  2023-05-01 -1.145349e+10 -9.028200e+10  1300.60  0.251844  19.747743   \n",
       "161  2023-06-01 -6.320106e+09 -8.870800e+10  1351.59  0.322891  23.696505   \n",
       "162  2023-07-01 -1.054830e+10 -8.909500e+10  1479.84  0.190752  26.499400   \n",
       "163  2023-08-01 -9.078755e+09 -8.368700e+10  1614.31  0.436716  26.943078   \n",
       "164  2023-09-01 -6.165483e+09 -8.605700e+10  1691.04  0.248513  26.999081   \n",
       "165  2023-10-01 -7.195517e+09 -8.758200e+10  1749.11 -0.038338  27.860200   \n",
       "166  2023-11-01 -6.332684e+09 -8.860400e+10  1806.50 -0.201514  28.637914   \n",
       "167  2023-12-01 -5.533670e+09 -8.756100e+10      NaN -0.099332  29.078133   \n",
       "168  2024-01-01 -5.740289e+09 -9.028400e+10      NaN  0.544750  30.039583   \n",
       "169  2024-02-01 -6.423296e+09 -9.230900e+10      NaN  0.618967  30.773019   \n",
       "170  2024-03-01 -7.363678e+09 -9.277500e+10      NaN  0.646417  32.011638   \n",
       "171  2024-04-01 -9.995436e+09 -9.873200e+10      NaN       NaN  32.275659   \n",
       "172  2024-05-01 -4.653023e+09 -9.959200e+10      NaN       NaN  32.216452   \n",
       "173  2024-06-01 -6.973989e+09 -9.701700e+10      NaN       NaN  32.525920   \n",
       "174  2024-07-01 -5.568882e+09 -1.034760e+11      NaN       NaN  32.879230   \n",
       "175  2024-08-01 -5.840348e+09 -9.476900e+10      NaN       NaN  33.645718   \n",
       "176  2024-09-01 -6.636224e+09 -1.091480e+11      NaN       NaN  34.009281   \n",
       "177  2024-10-01 -7.682133e+09 -9.806200e+10      NaN       NaN  34.205096   \n",
       "178  2024-11-01 -8.088026e+09 -1.040550e+11      NaN       NaN  34.414752   \n",
       "179  2024-12-01 -8.021306e+09 -1.221090e+11      NaN       NaN  34.967164   \n",
       "180  2025-01-01 -7.582447e+09 -1.555720e+11      NaN       NaN  35.501270   \n",
       "181  2025-02-01 -7.687427e+09           NaN      NaN       NaN  36.157475   \n",
       "182  2025-03-01           NaN           NaN      NaN       NaN  37.107862   \n",
       "\n",
       "       TR_LAW    US_LAW  TR_POLS   US_POLS     TR_POLICY     US_POLICY  \\\n",
       "160 -0.511973  1.327678 -1.01108  0.029425 -1.145349e+10 -9.028200e+10   \n",
       "161 -0.511973  1.327678 -1.01108  0.029425 -6.320106e+09 -8.870800e+10   \n",
       "162 -0.511973  1.327678 -1.01108  0.029425 -1.054830e+10 -8.909500e+10   \n",
       "163 -0.511973  1.327678 -1.01108  0.029425 -9.078755e+09 -8.368700e+10   \n",
       "164 -0.511973  1.327678 -1.01108  0.029425 -6.165483e+09 -8.605700e+10   \n",
       "165 -0.511973  1.327678 -1.01108  0.029425 -7.195517e+09 -8.758200e+10   \n",
       "166 -0.511973  1.327678 -1.01108  0.029425 -6.332684e+09 -8.860400e+10   \n",
       "167 -0.511973  1.327678 -1.01108  0.029425 -5.533670e+09 -8.756100e+10   \n",
       "168 -0.511973  1.327678 -1.01108  0.029425 -5.740289e+09 -9.028400e+10   \n",
       "169       NaN       NaN      NaN       NaN -6.423296e+09 -9.230900e+10   \n",
       "170       NaN       NaN      NaN       NaN -7.363678e+09 -9.277500e+10   \n",
       "171       NaN       NaN      NaN       NaN -9.995436e+09 -9.873200e+10   \n",
       "172       NaN       NaN      NaN       NaN -4.653023e+09 -9.959200e+10   \n",
       "173       NaN       NaN      NaN       NaN -6.973989e+09 -9.701700e+10   \n",
       "174       NaN       NaN      NaN       NaN -5.568882e+09 -1.034760e+11   \n",
       "175       NaN       NaN      NaN       NaN -5.840348e+09 -9.476900e+10   \n",
       "176       NaN       NaN      NaN       NaN -6.636224e+09 -1.091480e+11   \n",
       "177       NaN       NaN      NaN       NaN -7.682133e+09 -9.806200e+10   \n",
       "178       NaN       NaN      NaN       NaN -8.088026e+09 -1.040550e+11   \n",
       "179       NaN       NaN      NaN       NaN -8.021306e+09 -1.221090e+11   \n",
       "180       NaN       NaN      NaN       NaN -7.582447e+09 -1.555720e+11   \n",
       "181       NaN       NaN      NaN       NaN -7.687427e+09           NaN   \n",
       "182       NaN       NaN      NaN       NaN           NaN           NaN   \n",
       "\n",
       "     finbert_month  mbert  \n",
       "160            1.0    0.0  \n",
       "161            2.0    3.0  \n",
       "162            1.0    0.0  \n",
       "163            1.0    0.0  \n",
       "164            1.0    1.0  \n",
       "165            1.0    1.0  \n",
       "166            1.0    1.0  \n",
       "167            1.0    1.0  \n",
       "168            1.0    1.0  \n",
       "169            1.0    1.0  \n",
       "170            1.0    1.0  \n",
       "171            2.0    3.0  \n",
       "172            2.0    3.0  \n",
       "173            2.0    3.0  \n",
       "174            2.0    3.0  \n",
       "175            2.0    3.0  \n",
       "176            2.0    3.0  \n",
       "177            2.0    3.0  \n",
       "178            2.0    3.0  \n",
       "179            2.0    3.0  \n",
       "180            NaN    NaN  \n",
       "181            NaN    NaN  \n",
       "182            NaN    NaN  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final[160:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "818f6087",
   "metadata": {},
   "source": [
    "I update my final dataset, because some indicators are missing since the last month of 2023. So this will be the last month we predict on the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4b8fccd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "last_index = 166\n",
    "final = df_final[:last_index+1].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44b6b8bb",
   "metadata": {},
   "source": [
    "I create a new column from date column called month. These features must be engineered, because without changing anything it simply increases from 1 to 12. Therefore the model cannot capture that December and January are actually very close. So cyclical variables to reflect seasonalisty should be created. The easiest way to do this is to create sin and cos transformations of this variable. One transformation is simply not enough because e.g. sin(pi) and sin(0) have the same values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a5065bf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "final['date'] = pd.to_datetime(final['date'], errors='coerce')\n",
    "final['month'] = final['date'].dt.month\n",
    "final[\"month_sin\"]  = np.sin(2 * np.pi * final[\"month\"] / 12)\n",
    "final[\"month_cos\"]  = np.cos(2 * np.pi * final[\"month\"] / 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "db17a0bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>TR_BALANCE</th>\n",
       "      <th>US_BALANCE</th>\n",
       "      <th>TR_CPI</th>\n",
       "      <th>US_CPI</th>\n",
       "      <th>TRY_USD</th>\n",
       "      <th>TR_LAW</th>\n",
       "      <th>US_LAW</th>\n",
       "      <th>TR_POLS</th>\n",
       "      <th>US_POLS</th>\n",
       "      <th>TR_POLICY</th>\n",
       "      <th>US_POLICY</th>\n",
       "      <th>finbert_month</th>\n",
       "      <th>mbert</th>\n",
       "      <th>month</th>\n",
       "      <th>month_sin</th>\n",
       "      <th>month_cos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>-5.097985e+09</td>\n",
       "      <td>-4.850600e+10</td>\n",
       "      <td>174.07</td>\n",
       "      <td>0.341747</td>\n",
       "      <td>1.467119</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-5.097985e+09</td>\n",
       "      <td>-4.850600e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>8.660254e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-02-01</td>\n",
       "      <td>-4.396858e+09</td>\n",
       "      <td>-5.096500e+10</td>\n",
       "      <td>176.59</td>\n",
       "      <td>0.024921</td>\n",
       "      <td>1.508210</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.396858e+09</td>\n",
       "      <td>-5.096500e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.866025</td>\n",
       "      <td>5.000000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-03-01</td>\n",
       "      <td>-4.713215e+09</td>\n",
       "      <td>-5.045200e+10</td>\n",
       "      <td>177.62</td>\n",
       "      <td>0.410628</td>\n",
       "      <td>1.527426</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.713215e+09</td>\n",
       "      <td>-5.045200e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.123234e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-04-01</td>\n",
       "      <td>-5.540905e+09</td>\n",
       "      <td>-5.130900e+10</td>\n",
       "      <td>178.68</td>\n",
       "      <td>0.173688</td>\n",
       "      <td>1.485386</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-5.540905e+09</td>\n",
       "      <td>-5.130900e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.866025</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-05-01</td>\n",
       "      <td>-4.749759e+09</td>\n",
       "      <td>-5.261100e+10</td>\n",
       "      <td>178.04</td>\n",
       "      <td>0.077520</td>\n",
       "      <td>1.541019</td>\n",
       "      <td>0.04998</td>\n",
       "      <td>1.631022</td>\n",
       "      <td>-0.915286</td>\n",
       "      <td>0.438404</td>\n",
       "      <td>-4.749759e+09</td>\n",
       "      <td>-5.261100e+10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date    TR_BALANCE    US_BALANCE  TR_CPI    US_CPI   TRY_USD   TR_LAW  \\\n",
       "0 2010-01-01 -5.097985e+09 -4.850600e+10  174.07  0.341747  1.467119  0.04998   \n",
       "1 2010-02-01 -4.396858e+09 -5.096500e+10  176.59  0.024921  1.508210  0.04998   \n",
       "2 2010-03-01 -4.713215e+09 -5.045200e+10  177.62  0.410628  1.527426  0.04998   \n",
       "3 2010-04-01 -5.540905e+09 -5.130900e+10  178.68  0.173688  1.485386  0.04998   \n",
       "4 2010-05-01 -4.749759e+09 -5.261100e+10  178.04  0.077520  1.541019  0.04998   \n",
       "\n",
       "     US_LAW   TR_POLS   US_POLS     TR_POLICY     US_POLICY  finbert_month  \\\n",
       "0  1.631022 -0.915286  0.438404 -5.097985e+09 -4.850600e+10            1.0   \n",
       "1  1.631022 -0.915286  0.438404 -4.396858e+09 -5.096500e+10            1.0   \n",
       "2  1.631022 -0.915286  0.438404 -4.713215e+09 -5.045200e+10            1.0   \n",
       "3  1.631022 -0.915286  0.438404 -5.540905e+09 -5.130900e+10            1.0   \n",
       "4  1.631022 -0.915286  0.438404 -4.749759e+09 -5.261100e+10            1.0   \n",
       "\n",
       "   mbert  month  month_sin     month_cos  \n",
       "0    1.0      1   0.500000  8.660254e-01  \n",
       "1    1.0      2   0.866025  5.000000e-01  \n",
       "2    1.0      3   1.000000  6.123234e-17  \n",
       "3    1.0      4   0.866025 -5.000000e-01  \n",
       "4    1.0      5   0.500000 -8.660254e-01  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fd035860",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_cols = [c for c in final.columns if c not in (\"date\", \"TRY_per_USD\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "67ca7347",
   "metadata": {},
   "outputs": [],
   "source": [
    "target  = \"TRY_USD\"\n",
    "features  = final.drop(columns=[\"date\", target,\"month\"])\n",
    "sequence_length=12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "50c4a393",
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y, dates = [], [], [] #Ä± keep them in different lists for convenience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0f407c96",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(final)-sequence_length):\n",
    "    past_slice = final.iloc[i : i + sequence_length] \n",
    "    target_row = final.iloc[i + sequence_length]\n",
    "    X.append(final.iloc[i:i+sequence_length][feature_cols].values.astype(\"float32\"))\n",
    "    y.append(final.iloc[i+sequence_length][target])\n",
    "    dates.append(final.iloc[i+ sequence_length][\"date\"])\n",
    "X = np.stack(X)                          #this will have the final shape (samples, 12, no_features)\n",
    "y = np.asarray(y, dtype=\"float32\")       #this will have the final shape (samples,)\n",
    "dates= np.asarray(dates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d8b043f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train windows: (120, 12, 16) | test windows: (35, 12, 16)\n",
      "(35,)\n",
      "(35,)\n"
     ]
    }
   ],
   "source": [
    "final['date'] = pd.to_datetime(final['date'])\n",
    "split = np.searchsorted(dates, np.datetime64(\"2021-01-01\"))\n",
    "X_train_3d, X_test_3d = X[:split],  X[split:]\n",
    "y_train,    y_test    = y[:split],  y[split:]\n",
    "dates_test       = dates[split:]\n",
    "print(\"train windows:\", X_train_3d.shape, \"| test windows:\", X_test_3d.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed90aff3",
   "metadata": {},
   "source": [
    "I want the inputs to have the shape (lookback, no_features), because I want to use the numbers from the previous 12 months (this introduce time dependencies). So as in the above output, my training and test set have the shape (no_observations, lookback_period, no_features), and I need to convert them to 2d tensors to be able to scale them."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1f8ecfd",
   "metadata": {},
   "source": [
    "Scaling is an important operation in most of the ML algorithms, because if this operation is not done, the models focus on the features with biggest numbers."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "025f730e",
   "metadata": {},
   "source": [
    "The operation is as follows \n",
    "\n",
    "z = (xâÎ¼)/Ï"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "048a2db3",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_feats = X_train_3d.shape[2]\n",
    "X_train = X_train_3d.reshape(X_train_3d.shape[0],  12 * n_feats)\n",
    "X_test = X_test_3d.reshape(X_test_3d.shape[0],   12 * n_feats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2a5300d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler_X = StandardScaler()\n",
    "X_train_scaled = scaler_X.fit_transform(X_train)\n",
    "X_test_scaled  = scaler_X.transform(X_test)\n",
    "\n",
    "scaler_y = StandardScaler()\n",
    "y_train_scaled = scaler_y.fit_transform(y_train.reshape(-1,1)).ravel()\n",
    "y_test_scaled  = scaler_y.transform(y_test.reshape(-1,1)).ravel()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d7d2438f",
   "metadata": {},
   "outputs": [],
   "source": [
    "target_scaler = StandardScaler()                     # separate scaler for y\n",
    "y_train_scaled = target_scaler.fit_transform(y_train.reshape(-1, 1)).flatten()  # fit on train\n",
    "y_test_scaled  = target_scaler.transform(y_test.reshape(-1, 1)).flatten()        # apply to test\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea8cf53",
   "metadata": {},
   "source": [
    "I transform the format of the dataset to a format that is readable by pytorch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "010bae35",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_ds = TensorDataset(\n",
    "    torch.tensor(X_train_scaled, dtype=torch.float32),\n",
    "    torch.tensor(y_train_scaled, dtype=torch.float32)\n",
    ")\n",
    "test_ds = TensorDataset(\n",
    "    torch.tensor(X_test_scaled, dtype=torch.float32),\n",
    "    torch.tensor(y_test_scaled, dtype=torch.float32)\n",
    ")\n",
    "train_loader = DataLoader(train_ds, batch_size=32, shuffle=False)\n",
    "test_loader  = DataLoader(test_ds,  batch_size=32, shuffle=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3c43eb7",
   "metadata": {},
   "source": [
    "I will assign variable names in the definition of my FFNN class to make it easier to show mathematical operations done.\n",
    "\n",
    "So here I inherit the class from the existing module in pytorch's nn class. Then I design the arhitecture as I want it to be"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "e8bed4fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FFNN(nn.Module):\n",
    "    def __init__(self, input_dim):\n",
    "        super().__init__()\n",
    "        self.net = nn.Sequential(\n",
    "            nn.Linear(input_dim, 256), #x will be used for input vector, and h for hidden state vector\n",
    "            nn.ReLU(), #z\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(256, 1)\n",
    "        )\n",
    "    def forward(self, x):\n",
    "        return self.net(x).squeeze(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "895c8f29",
   "metadata": {},
   "source": [
    "So basically our input vector lives in 16 dimensional vector space,\n",
    "\n",
    "x â R^16\n",
    "\n",
    "Let W_1 â R^(256 x 16) be the first weights matrix showing the weight of connections between input layer and the hidden layer,\n",
    "\n",
    "b_1 â R^256 be the first bias vector,\n",
    "\n",
    "And W_2 â R^(1 x 256) be the second weight matrix showing the weight of connections between hidden layer and the output layer,\n",
    "\n",
    "b_2 â R be the second bias vector (Actually a scalar, since it exists in one-dimensional space),\n",
    "\n",
    "the ReLU activation function is:\n",
    "\n",
    "z=ReLU(h)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5fec1ae",
   "metadata": {},
   "source": [
    "The feed-forward operation occurs as follows\n",
    "\n",
    "h = W_1*x + b_1\n",
    "\n",
    "then activation function (ReLU in this case) is applied element-wise\n",
    "\n",
    "z = max(0,h)\n",
    "\n",
    "then, Å· is produced by\n",
    "\n",
    "Å· = W_2*z + b_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57f2c7eb",
   "metadata": {},
   "source": [
    "### The reason for choosing ReLU and hidden layer parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "983bfa4d",
   "metadata": {},
   "source": [
    "I chose ReLU as the activation function, because it is empricially shown that it works very well with tabular data.\n",
    "\n",
    "I only use one hidden layer because my data is not very large, therefore I think adding more layers would increase the likelkihood of overfitting significantly.\n",
    "\n",
    "I chose the hidden layer as 256, because I want my model to capture non-linearities well, and I add some regularizers to control this. Dropout randomly drops 20% of the neurons in the hidden layer at each batch, so the model does not overfit on specific neurons. Also weight decay is used because....\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "808df82f",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device(\"cpu\")\n",
    "model = FFNN(X_train_scaled.shape[1]).to(device)\n",
    "opt    = torch.optim.Adam(model.parameters(), lr=1e-3, weight_decay=0.001)\n",
    "criterion = nn.MSELoss()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "477361f8",
   "metadata": {},
   "source": [
    "Then necessary settings for PyTorch. A device need to be specified, in this case I use my CPU because the computation is not very extensive. Then the model object is called and moved to the device.\n",
    "\n",
    "The optimizer I prefer is Adam. It is a variant of Stochastic Gradient Descent algorithm and on top of SGD it introduces momentum by integrating exponential average of gradients and exponential average of squared gradients.\n",
    "\n",
    "Mean squared error loss is the most appropriate for this task, because our model is a 'regressor' model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "150c5f84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6da42d5257af4f3f915cc42f55e75cf7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epochs:   0%|          | 0/200 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_losses = []\n",
    "total_loss = 0.0\n",
    "for epoch in tqdm(range(1, 201), desc=\"Epochs\"):\n",
    "    model.train()                            \n",
    "    epoch_loss = 0.0    \n",
    "    n_obs      = 0 \n",
    "\n",
    "\n",
    "    for xb, yb in train_loader:               \n",
    "        xb, yb = xb.to(device), yb.to(device) \n",
    "\n",
    "        opt.zero_grad()                 \n",
    "        preds = model(xb)                    \n",
    "        loss = criterion(model(xb), yb)           \n",
    "        loss.backward()                    \n",
    "        \n",
    "\n",
    "        opt.step()     \n",
    "        total_loss += loss.item() * xb.size(0)# update weights\n",
    "\n",
    "        epoch_loss += loss.item() * xb.size(0)  # sum of (loss Ã batch_size)\n",
    "        n_obs      += xb.size(0)               # add batch size to counter\n",
    "\n",
    "    avg_loss = epoch_loss / n_obs              # average over entire epoch\n",
    "    train_losses.append(avg_loss)              # store for plotting later\n",
    "\n",
    "    # ---- scheduler step on epoch metric (here training loss) ----\n",
    "    #scheduler.step(avg_loss)                  # Reduce LR if plateau"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb3f4917",
   "metadata": {},
   "source": [
    "I use the tqdm library to keep track of the training process. I use 200 epochs (which is more than enough, but it doesnt cost much time since the model is trained on only 100 sth training instances), therefore I initiate a loop for every epoch, set the epoch_loss to 0 to track the loss within the epoch. \n",
    "\n",
    "Optimizer.step() takes a step in the space of cost function, with the given parameter learning rate and calculated gradient.\n",
    "\n",
    "Then I iterate over the batches in my feature and target dataset. I move each batch onto my device, then set the gradients zero for each batch, keep the predictions and calculate the loss for the batch. I calculate the training loss and store it in a list to plot it later"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d2cbd344",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.eval()                             \n",
    "all_preds=[]\n",
    "with torch.no_grad():\n",
    "    for xb, _ in test_loader:                \n",
    "        xb = xb.to(device)                   \n",
    "        batch_pred = model(xb).cpu().numpy()  # bring back to cpu then numpy format for postâprocessing\n",
    "        all_preds.append(batch_pred)         \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88806b43",
   "metadata": {},
   "source": [
    "Then I turn the evaluation mode on, this turns off weight updating and random neuron dropout, so each input is fed forward. I exclude target batches because I make the predictions here. I set an empty list and append my results to this list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "f6685090",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.607801 ,  8.028068 ,  8.022507 ,  7.8638616,  7.749095 ,\n",
       "        7.5226007,  7.5087333,  7.8503222,  8.218231 ,  8.473162 ,\n",
       "        8.293997 ,  8.090336 ,  8.270462 ,  8.453978 ,  8.830172 ,\n",
       "        9.228589 ,  9.554595 ,  9.790391 , 10.031323 , 10.560747 ,\n",
       "       10.892085 , 11.530616 , 11.718415 , 12.14251  , 12.541071 ,\n",
       "       12.305832 , 12.850886 , 12.944985 , 13.460471 , 13.377064 ,\n",
       "       13.390519 , 13.688263 , 13.779986 , 14.369613 , 14.611472 ],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat_scaled = np.concatenate(all_preds)\n",
    "y_hat        = target_scaler.inverse_transform(y_hat_scaled.reshape(-1,1)).flatten()\n",
    "y_true       = y_test\n",
    "y_hat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f02d31df",
   "metadata": {},
   "source": [
    "I concatanate batches into all predictions, than inverse transform them (because they are scaled predictions), so I get the actual values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "3f19ca9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MAEÂ =Â 5.7398\n",
      "Test RMSEÂ =Â 7.0917\n"
     ]
    }
   ],
   "source": [
    "mae  = mean_absolute_error(y_true, y_hat)    # mean absolute error\n",
    "rmse = np.sqrt(mean_squared_error(y_true, y_hat))  # root mean square error\n",
    "print(f\"Test MAEÂ =Â {mae:,.4f}\")\n",
    "print(f\"Test RMSEÂ =Â {rmse:,.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "99345877",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(train_losses, label=\"Train MSE\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"MSE Loss\")\n",
    "plt.title(\"Training Loss over Epochs\")\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c459aefa",
   "metadata": {},
   "source": [
    "The training MSE falls quickly in the first 20 epochs and then flattens, meaning that the model has probably found the local (or even global) minima in the cost function's space. Therefore I can conclude that the weights learned during training are close to optimal weights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "0fe5f47e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.plot(dates_test, y_true, label=\"Actual\")\n",
    "plt.plot(dates_test, y_hat,  label=\"Predicted\")\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(\"TRY/USD\")\n",
    "plt.title(f\"TRY/USD â OutâofâSample \")\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3371a6cf",
   "metadata": {},
   "source": [
    "The plot shows that FFNN can capture the slow depreciation trend, but it under predicts the sharp decline that happened during the last months of 2021. This is when central bank cut the policy rates when inflation soared. Unofficial sources predicted inflation rates as high as 150% in these months, policy rates were around 18%"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ec6707b",
   "metadata": {},
   "source": [
    "### Why does the model underperform? "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd03336c",
   "metadata": {},
   "source": [
    "The model only saw +- 500 base points move in-sample, and the 2021-2022 shocks are outside this range. A FFNN interpolates well, but it cannot extrapolate linear trends beyond its training range. Even if the model is supplemented by sentimental data, the crisis of these years were something never seen before. Therefore the model cannot fully capture it.\n",
    "\n",
    "Also, what happened back in Turkey was something that could not be captures easily by models. Political/monetary regime shifts occured, which is hard-code inside a model, even if the model captures the resulting sentiment, it is probably not as efficient.\n",
    "\n",
    "Lastly, the amount of data I work with is not large enough to account for such events. The performance would probably be way higher if similar events occured earlier. Neural networks basically learn the patterns in the data, but they are not so good when it comes to extrapolating because their weights are optimized to minimize the cost of their training loss function, not something else. Therefore the model cannot perform something it is not trained for.\n",
    "\n",
    "We basically make the assumption that the sample generation process for the test set is the same as training set, which is wrong because it is affected by the policy regime. Also, FFNN assumes the data points are independent, which is a very false assumption for time-series data. But I counted out the possiblity of training a sequential model because I deal with limited number of samples."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa3083ca",
   "metadata": {},
   "source": [
    "## Counterfactual analysis "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2a4ce5f",
   "metadata": {},
   "source": [
    "In this part, I will analyze what would have happened to the economy had Turkey followed orthodox policies, i.e. policy rates are assumed to be + 200 base points on top of the existing inflation rate, and everything else assumed to stay the same (this is a very strong assumption, but it is the simplest way to do this. Dropping this assumption would lead to a lot of dependencies, e.g. as a result earlier inflation series would probably be lower etc would also effect other variables). I will do it using a linear model. The training set will consist of years when Turkey followed orthodox policies, and the test set will consist of 2018-2024. The reason for this choice is that Erdogan explicity stated that \"interest rates are the cause, inflation is the result\", and even referred to high interest rates as \"mother and father of all evil\".Therefore this marks the period when Turkey started following unorthodox policies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "59061815",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_countfact = final.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "e93b45fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "448b4012",
   "metadata": {},
   "source": [
    "The year on year inflation has to be calculated to be able to set the counterfactual policy rates.\n",
    "\n",
    "Then I calculate the real gap between policy rate and year on year inflation (which should give us a sense of real interest rates).\n",
    "\n",
    "The exchange rate has grown almost exponentially since 2021. To stabilize the variance and linearize proportional changes, I work with the log difference.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "1481f778",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_countfact[\"infl_yoy\"] = df_countfact[\"TR_CPI\"].pct_change(periods=12) * 100 \n",
    "df_countfact[\"gap_real\"] = df_countfact[\"TR_POLICY\"] - df_countfact[\"infl_yoy\"].shift(1) \n",
    "df_countfact[\"dlog_fx\"]  = np.log(df_countfact[\"TRY_USD\"]).diff()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "11fd1375",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = df_countfact[(df_countfact[\"date\"] >= \"2010-01-01\") & (df_countfact[\"date\"] <= \"2017-12-31\")].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "dd57854a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = train[[\"gap_real\"]].values         \n",
    "y_train = train[\"dlog_fx\"].values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "8c8e4724",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression().fit(X_train, y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "12d679de",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_cf = df_countfact.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "db51a130",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_cf[\"orthodox_rate\"]  = df_cf[\"infl_yoy\"] + 2.0                    \n",
    "df_cf[\"gap_orthodox\"]   = df_cf[\"orthodox_rate\"] - df_cf[\"infl_yoy\"].shift(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "b6f2b031",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mertturhan/anaconda3/lib/python3.11/site-packages/sklearn/utils/validation.py:2732: UserWarning: X has feature names, but LinearRegression was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "df_cf[\"dlog_cf\"] = model.predict(df_cf[[\"gap_orthodox\"]].fillna(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "0394440b",
   "metadata": {},
   "outputs": [],
   "source": [
    "log_cf  = [np.log(df_cf.loc[0, \"TRY_USD\"])]\n",
    "for dl in df_cf[\"dlog_cf\"].iloc[1:]:\n",
    "    log_cf.append(log_cf[-1] + dl)\n",
    "\n",
    "df_cf[\"TRY_per_USD_counter\"] = np.exp(log_cf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "0d0f241d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,4))\n",
    "plt.plot(df_cf[\"date\"], df_cf[\"TRY_USD\"],           label=\"Actual\")\n",
    "plt.plot(df_cf[\"date\"], df_cf[\"TRY_per_USD_counter\"],   label=\"Orthodox counter-factual\")\n",
    "plt.title(\"TRY/USD: Actual vs Counterfactual (yoy inflation + 200 bp)\")\n",
    "plt.ylabel(\"TRY/USD\"); plt.legend(); plt.tight_layout(); plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bf406f9",
   "metadata": {},
   "source": [
    "## Discussion "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87b3e3b8",
   "metadata": {},
   "source": [
    "My counterfactual analysis has shown that the USD/TRY exchange rate would be in 12-14 band if the CB had followed playbook policies (with the assumptions stated before). This is about 60% stronger than the actual case. \n",
    "\n",
    "This shows that following neo-classical economics theory would have slowed down the depreciation of Turkish Lira.\n",
    "This underscores the credibility premium of policy orthodoxy. Markets reward a stance with lower risk.\n",
    "\n",
    "\n",
    "\n",
    "Adding to the earlier shortcomings of the analysis, the model also extrapolates beyond the training period (pre-2018), therefore this introduces uncertainty. The magnitudes should not be read precise, they give us an idea about what might have happened"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8de78a09",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
